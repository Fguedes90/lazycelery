name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  # Combine quick checks into one job for faster feedback
  quality-checks:
    name: Code Quality (Format, Lint, Check)
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Install mise
      uses: jdx/mise-action@v2
      with:
        install: true
        cache: true
        github_token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Install Rust components
      run: |
        rustup component add clippy rustfmt
    
    - name: Check Cargo.toml format
      run: |
        if ! cargo check --quiet; then
          echo "❌ Cargo check failed"
          exit 1
        fi
        echo "✅ Cargo check passed"
    
    - name: Check formatting
      run: |
        if ! mise run fmt -- --check; then
          echo "❌ Code is not formatted correctly"
          echo "Run 'mise run fmt' to fix formatting"
          exit 1
        fi
        echo "✅ Code formatting is correct"
    
    - name: Run clippy
      run: |
        if ! mise run lint; then
          echo "❌ Linting failed"
          exit 1
        fi
        echo "✅ All linting checks passed"

  test:
    name: Test
    runs-on: ubuntu-latest
    services:
      redis:
        image: redis:alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 5s
          --health-timeout 3s
          --health-retries 3
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Rust cache
      uses: Swatinem/rust-cache@v2
      with:
        key: "test-cache"
    
    - name: Install mise
      uses: jdx/mise-action@v2
      with:
        install: true
        cache: true
        github_token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Install Redis CLI (cached)
      run: |
        sudo apt-get update -qq
        sudo apt-get install -y redis-tools
    
    - name: Run tests in parallel
      run: |
        echo "Running tests with optimizations..."
        # Run tests in parallel with release mode for faster execution
        if ! cargo test --release --jobs $(nproc); then
          echo "❌ Tests failed"
          exit 1
        fi
        echo "✅ All tests passed"

  security:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Rust cache
      uses: Swatinem/rust-cache@v2
      with:
        key: "security-cache"
    
    - name: Install mise
      uses: jdx/mise-action@v2
      with:
        install: true
        cache: true
        github_token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Security audit
      run: |
        if ! mise run audit; then
          echo "❌ Security audit failed"
          exit 1
        fi
        echo "✅ Security audit passed"

  build:
    name: Build (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Rust cache
      uses: Swatinem/rust-cache@v2
      with:
        key: "build-${{ matrix.os }}"
    
    - name: Install mise
      uses: jdx/mise-action@v2
      with:
        install: true
        cache: true
        github_token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Build release (optimized)
      run: |
        echo "Building on ${{ matrix.os }}"
        # Use parallel compilation
        cargo build --release --jobs $(nproc || echo 4)
        echo "✅ Build successful on ${{ matrix.os }}"
    
    - name: Test binary (Unix)
      if: matrix.os != 'windows-latest'
      run: |
        ./target/release/lazycelery --help
        echo "✅ Binary works correctly"
    
    - name: Test binary (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        .\target\release\lazycelery.exe --help
        echo "✅ Binary works correctly"