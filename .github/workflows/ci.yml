name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1
  # Aggressive cargo optimizations to avoid re-downloading crates
  CARGO_NET_RETRY: 10
  # Disable incremental compilation for CI builds (more deterministic)
  CARGO_INCREMENTAL: 0
  CARGO_NET_GIT_FETCH_WITH_CLI: true
  # Use sparse registry for faster index updates
  CARGO_REGISTRIES_CRATES_IO_PROTOCOL: sparse
  # Additional optimizations
  CARGO_HTTP_MULTIPLEXING: false
  CARGO_NET_OFFLINE: false
  # Reduce memory usage in parallel builds
  CARGO_BUILD_JOBS: 4

jobs:
  # Detect what types of changes were made
  detect-changes:
    name: Detect Changes
    runs-on: ubuntu-latest
    outputs:
      code: ${{ steps.filter.outputs.code }}
      docs: ${{ steps.filter.outputs.docs }}
    steps:
    - uses: actions/checkout@v5
    
    - name: Detect file changes
      uses: dorny/paths-filter@v3
      id: filter
      with:
        filters: |
          code:
            - 'src/**'
            - 'Cargo.*'
            - '.github/workflows/**'
            - 'tests/**'
            - '.cargo/**'
          docs:
            - '*.md'
            - 'docs/**'
            - 'screenshots/**'

  # Combine quick checks into one job for faster feedback
  quality-checks:
    name: Code Quality (Format, Lint, Check)
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.code == 'true'
    steps:
    - uses: actions/checkout@v5
    
    - name: Setup optimized Rust cache
      uses: Swatinem/rust-cache@v2
      with:
        # Shared key for quality checks
        shared-key: "quality-checks"
        # Let rust-cache handle standard directories automatically
        cache-on-failure: true
        save-if: ${{ github.ref == 'refs/heads/main' }}
        # Include Cargo.lock in key for more precise caching
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        # Cache workspaces for better incremental builds
        workspaces: "."
    
    - name: Install mise (cached)
      uses: jdx/mise-action@v3
      with:
        install: true
        cache: true
        github_token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Cache Rustup toolchain
      uses: actions/cache@v4
      with:
        path: |
          ~/.rustup/settings.toml
          ~/.rustup/toolchains
          ~/.rustup/update-hashes
        key: ${{ runner.os }}-rustup-${{ hashFiles('rust-toolchain.toml', 'rust-toolchain') }}
        restore-keys: |
          ${{ runner.os }}-rustup-

    - name: Install Rust components (cached)
      run: |
        rustup component add clippy rustfmt
    
    - name: Cache cargo check
      run: |
        # Use cargo check with cache optimization
        if ! cargo check --locked; then
          echo "‚ùå Cargo check failed"
          exit 1
        fi
        echo "‚úÖ Cargo check passed"
    
    - name: Check formatting (fast)
      run: |
        if ! cargo fmt --all --check; then
          echo "‚ùå Code is not formatted correctly"
          echo "Run 'cargo fmt' to fix formatting"
          exit 1
        fi
        echo "‚úÖ Code formatting is correct"
    
    - name: Run clippy (cached)
      run: |
        if ! cargo clippy --locked --all-targets --all-features -- -D warnings; then
          echo "‚ùå Linting failed"
          exit 1
        fi
        echo "‚úÖ All linting checks passed"

  test:
    name: Test
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.code == 'true'
    services:
      redis:
        image: redis:alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 3s
          --health-timeout 2s
          --health-retries 2
    
    steps:
    - uses: actions/checkout@v5
    
    - name: Setup optimized Rust cache for tests
      uses: Swatinem/rust-cache@v2
      with:
        # Maximum caching for tests
        shared-key: "test-deps"
        cache-on-failure: true
        save-if: ${{ github.ref == 'refs/heads/main' }}
        # Cache all targets for comprehensive testing
        cache-targets: "true"
        cache-all-crates: "true"
        # Include Cargo.lock in key for more precise caching
        key: ${{ runner.os }}-test-${{ hashFiles('**/Cargo.lock') }}
        workspaces: "."
    
    - name: Install mise (cached)
      uses: jdx/mise-action@v3
      with:
        install: true
        cache: true
        github_token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Cache APT packages
      uses: awalsh128/cache-apt-pkgs-action@v1
      with:
        packages: redis-tools
        version: 1.0
    
    - name: Run tests with maximum optimization
      run: |
        echo "Running tests with cache optimization..."
        # Use locked deps and optimized flags for faster test execution
        if ! cargo test --locked --release --jobs $(nproc) -- --test-threads $(nproc); then
          echo "‚ùå Tests failed"
          exit 1
        fi
        echo "‚úÖ All tests passed"

  security:
    name: Security Audit
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.code == 'true'
    steps:
    - uses: actions/checkout@v5
    
    - name: Setup optimized Rust cache for security
      uses: Swatinem/rust-cache@v2
      with:
        shared-key: "security-audit"
        cache-on-failure: true
        save-if: ${{ github.ref == 'refs/heads/main' }}
    
    - name: Install mise (cached)
      uses: jdx/mise-action@v3
      with:
        install: true
        cache: true
        github_token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Cache cargo-audit binary
      uses: actions/cache@v4
      with:
        path: ~/.cargo/bin/cargo-audit
        key: cargo-audit-${{ runner.os }}-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          cargo-audit-${{ runner.os }}-
    
    - name: Install cargo-audit if not cached
      run: |
        if ! command -v cargo-audit &> /dev/null; then
          echo "Installing cargo-audit..."
          cargo install cargo-audit --locked
        else
          echo "‚úÖ cargo-audit already cached"
        fi
    
    - name: Run security audit
      run: |
        # Run security audit (cargo audit doesn't support --locked flag)
        if ! cargo audit; then
          echo "‚ùå Security audit failed"
          exit 1
        fi
        echo "‚úÖ Security audit passed"

  build:
    name: Build (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    needs: detect-changes
    if: needs.detect-changes.outputs.code == 'true'
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    
    steps:
    - uses: actions/checkout@v5
    
    - name: Setup optimized build cache
      uses: Swatinem/rust-cache@v2
      with:
        shared-key: "build-${{ matrix.os }}"
        cache-on-failure: true
        save-if: ${{ github.ref == 'refs/heads/main' }}
        cache-targets: "true"
        cache-all-crates: "true"
    
    - name: Install mise (cached)
      uses: jdx/mise-action@v3
      with:
        install: true
        cache: true
        github_token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Build release with maximum cache optimization
      run: |
        echo "Building on ${{ matrix.os }}"
        # Use locked deps and parallel compilation
        cargo build --locked --release --jobs $(nproc || echo 4)
        echo "‚úÖ Build successful on ${{ matrix.os }}"
    
    - name: Test binary (Unix)
      if: matrix.os != 'windows-latest'
      run: |
        ./target/release/lazycelery --help
        echo "‚úÖ Binary works correctly"
    
    - name: Test binary (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        .\target\release\lazycelery.exe --help
        echo "‚úÖ Binary works correctly"

  # Lightweight docs check for documentation-only changes
  docs-check:
    name: Documentation Check
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.docs == 'true' && needs.detect-changes.outputs.code == 'false'
    steps:
    - uses: actions/checkout@v5
    
    - name: Check markdown files
      run: |
        echo "üìù Checking documentation files..."
        # Simple check for broken markdown links (basic validation)
        find . -name "*.md" -exec echo "Checking {}" \;
        echo "‚úÖ Documentation check completed"