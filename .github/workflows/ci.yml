name: CI

on:
  push:
    branches: [ main, master, develop ]
    paths-ignore:
      - '**.md'
      - 'LICENSE'
      - '.gitignore'
      - 'docs/**'
  pull_request:
    branches: [ main, master, develop ]
    paths-ignore:
      - '**.md'
      - 'LICENSE'
      - '.gitignore'
      - 'docs/**'

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  # Format checking
  fmt:
    name: Rustfmt
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt

      - name: Install mise
        uses: jdx/mise-action@v2
        with:
          version: latest
          install: true

      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}

      - name: Check formatting
        run: mise run ci-fmt

  # Lint checking
  clippy:
    name: Clippy
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: clippy

      - name: Install mise
        uses: jdx/mise-action@v2
        with:
          version: latest
          install: true

      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}

      - name: Cache cargo index
        uses: actions/cache@v4
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}

      - name: Cache target
        uses: actions/cache@v4
        with:
          path: target
          key: ${{ runner.os }}-target-${{ hashFiles('**/Cargo.lock') }}

      - name: Run clippy
        run: mise run ci-lint

  # Testing on multiple platforms
  test:
    name: Test Suite - ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        rust: [stable]
        include:
          - os: ubuntu-latest
            rust: beta
          - os: ubuntu-latest
            rust: nightly
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ matrix.rust }}

      - name: Install mise
        uses: jdx/mise-action@v2
        with:
          version: latest
          install: true

      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}

      - name: Cache cargo index
        uses: actions/cache@v4
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}

      - name: Cache target
        uses: actions/cache@v4
        with:
          path: target
          key: ${{ runner.os }}-${{ matrix.rust }}-target-${{ hashFiles('**/Cargo.lock') }}

      - name: Start Redis (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y redis-server
          sudo systemctl start redis-server

      - name: Start Redis (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          brew install redis
          brew services start redis

      - name: Start Redis (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          choco install redis-64 -y
          redis-server --service-install
          redis-server --service-start

      - name: Build
        run: cargo build --verbose

      - name: Run tests
        run: mise run ci-test

      - name: Run doc tests
        run: cargo test --doc

  # Security audit
  security_audit:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Install mise
        uses: jdx/mise-action@v2
        with:
          version: latest
          install: true

      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}

      - name: Install cargo-audit
        run: cargo install cargo-audit

      - name: Run security audit
        run: mise run ci-audit

  # Check MSRV (Minimum Supported Rust Version)
  msrv:
    name: Check MSRV
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust 1.70.0 (MSRV)
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: 1.70.0

      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}

      - name: Check MSRV
        run: cargo check --all-features

  # Coverage report
  coverage:
    name: Code Coverage
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Install mise
        uses: jdx/mise-action@v2
        with:
          version: latest
          install: true

      - name: Install tarpaulin
        run: cargo install cargo-tarpaulin

      - name: Start Redis
        run: |
          sudo apt-get update
          sudo apt-get install -y redis-server
          sudo systemctl start redis-server

      - name: Generate coverage
        run: cargo tarpaulin --verbose --all-features --workspace --timeout 120 --out xml

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./cobertura.xml
          fail_ci_if_error: true
          token: ${{ secrets.CODECOV_TOKEN }}

  # Final status check
  ci-success:
    name: CI Success
    if: ${{ success() }}
    needs: [fmt, clippy, test, security_audit, msrv]
    runs-on: ubuntu-latest
    steps:
      - name: CI succeeded
        run: exit 0