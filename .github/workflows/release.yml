name: Release

on:
  push:
    tags:
      - 'v*'

env:
  CARGO_TERM_COLOR: always

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
    - uses: actions/checkout@v4
    
    - name: Install mise
      uses: jdx/mise-action@v2
      with:
        install: true
        cache: true
        github_token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Run tests
      run: mise run test
    
    - name: Build release
      run: mise run build
    
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        draft: false
        prerelease: false

  build-binaries:
    name: Build Binaries
    needs: create-release
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
        - os: ubuntu-latest
          target: x86_64-unknown-linux-gnu
          name: lazycelery-linux-x86_64
        - os: windows-latest
          target: x86_64-pc-windows-msvc
          name: lazycelery-windows-x86_64.exe
        - os: macos-latest
          target: x86_64-apple-darwin
          name: lazycelery-macos-x86_64
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install mise
      uses: jdx/mise-action@v2
      with:
        install: true
        cache: true
        github_token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Build binary
      run: |
        mise run build
        if [ "${{ matrix.os }}" = "windows-latest" ]; then
          cp target/release/lazycelery.exe ${{ matrix.name }}
        else
          cp target/release/lazycelery ${{ matrix.name }}
        fi
    
    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: ./${{ matrix.name }}
        asset_name: ${{ matrix.name }}
        asset_content_type: application/octet-stream