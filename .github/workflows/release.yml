name: Release

on:
  workflow_dispatch:
    inputs:
      version_type:
        description: 'Version bump type'
        required: true
        default: 'patch'
        type: choice
        options:
        - patch
        - minor
        - major
  push:
    tags:
      - 'v*'

env:
  CARGO_TERM_COLOR: always

jobs:
  prepare-release:
    name: Prepare Release
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'
    outputs:
      new_version: ${{ steps.version.outputs.version }}
    steps:
    - uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0
    
    - name: Install mise
      uses: jdx/mise-action@v2
      with:
        install: true
        cache: true
        github_token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Configure git
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
    
    - name: Install Rust components and dependencies
      run: |
        rustup component add rustfmt clippy
        cargo install cargo-edit
        mise install git-cliff
    
    - name: Bump version
      run: |
        echo "Bumping version (${{ github.event.inputs.version_type }})"
        cargo set-version --bump ${{ github.event.inputs.version_type }}
        NEW_VERSION=$(cargo metadata --no-deps --format-version 1 | jq -r '.packages[0].version')
        echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV
        echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT
      id: version
    
    - name: Update version in UI
      run: |
        sed -i "s/LazyCelery v[0-9]\+\.[0-9]\+\.[0-9]\+/LazyCelery v$NEW_VERSION/g" src/ui/mod.rs
    
    - name: Generate changelog
      run: |
        git-cliff --tag "v$NEW_VERSION" -o CHANGELOG.md
    
    - name: Run tests
      run: mise run test
    
    - name: Commit changes
      run: |
        git add Cargo.toml Cargo.lock CHANGELOG.md src/ui/mod.rs
        git commit -m "chore(release): prepare for v$NEW_VERSION"
    
    - name: Create and push tag
      run: |
        git tag -a "v$NEW_VERSION" -m "Release v$NEW_VERSION"
        git push origin main
        git push origin "v$NEW_VERSION"

  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Install mise
      uses: jdx/mise-action@v2
      with:
        install: true
        cache: true
        github_token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Install git-cliff
      run: mise install git-cliff
    
    - name: Get version
      id: version
      run: |
        VERSION=${GITHUB_REF#refs/tags/v}
        echo "version=$VERSION" >> $GITHUB_OUTPUT
    
    - name: Generate release notes
      id: release_notes
      run: |
        git-cliff --latest --strip header > release_notes.md
        echo "notes<<EOF" >> $GITHUB_OUTPUT
        cat release_notes.md >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
    
    - name: Run tests before release
      run: mise run test
    
    - name: Create Release
      id: create_release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ github.ref_name }}
        name: LazyCelery v${{ steps.version.outputs.version }}
        body: ${{ steps.release_notes.outputs.notes }}
        draft: false
        prerelease: ${{ contains(steps.version.outputs.version, '-') }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-binaries:
    name: Build Binaries
    needs: create-release
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
        - os: ubuntu-latest
          target: x86_64-unknown-linux-gnu
          name: lazycelery-linux-x86_64
          archive: tar.gz
        - os: windows-latest
          target: x86_64-pc-windows-msvc
          name: lazycelery-windows-x86_64.exe
          archive: zip
        - os: macos-latest
          target: x86_64-apple-darwin
          name: lazycelery-macos-x86_64
          archive: tar.gz
        - os: macos-latest
          target: aarch64-apple-darwin
          name: lazycelery-macos-aarch64
          archive: tar.gz
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install mise
      uses: jdx/mise-action@v2
      with:
        install: true
        cache: true
        github_token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Add target
      run: rustup target add ${{ matrix.target }}
    
    - name: Build binary
      run: |
        cargo build --release --target ${{ matrix.target }} --locked
        
        if [ "${{ matrix.os }}" = "windows-latest" ]; then
          cp target/${{ matrix.target }}/release/lazycelery.exe ${{ matrix.name }}
        else
          cp target/${{ matrix.target }}/release/lazycelery ${{ matrix.name }}
        fi
    
    - name: Create archive (Unix)
      if: matrix.archive == 'tar.gz'
      run: |
        tar -czf ${{ matrix.name }}.tar.gz ${{ matrix.name }}
        echo "ASSET_PATH=${{ matrix.name }}.tar.gz" >> $GITHUB_ENV
    
    - name: Create archive (Windows)
      if: matrix.archive == 'zip'
      run: |
        Compress-Archive -Path ${{ matrix.name }} -DestinationPath ${{ matrix.name }}.zip
        echo "ASSET_PATH=${{ matrix.name }}.zip" >> $env:GITHUB_ENV
    
    - name: Upload Release Asset
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ github.ref_name }}
        files: ${{ env.ASSET_PATH }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  publish-crate:
    name: Publish to crates.io
    runs-on: ubuntu-latest
    needs: create-release
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Rust cache
      uses: Swatinem/rust-cache@v2
      with:
        shared-key: "publish-crate"
        cache-directories: |
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
    
    - name: Install mise
      uses: jdx/mise-action@v2
      with:
        install: true
        cache: true
        github_token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Get version from tag
      id: version
      run: |
        VERSION=${GITHUB_REF#refs/tags/v}
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Publishing version: $VERSION"
    
    - name: Verify Cargo.toml version matches tag
      run: |
        TAG_VERSION="${{ steps.version.outputs.version }}"
        CARGO_VERSION=$(cargo metadata --no-deps --format-version 1 | jq -r '.packages[] | select(.name == "lazycelery") | .version')
        echo "Tag version: $TAG_VERSION"
        echo "Cargo.toml version: $CARGO_VERSION"
        if [ "$TAG_VERSION" != "$CARGO_VERSION" ]; then
          echo "‚ùå Version mismatch: tag=$TAG_VERSION, Cargo.toml=$CARGO_VERSION"
          exit 1
        fi
        echo "‚úÖ Version matches tag"
    
    - name: Run final quality checks before publish
      run: |
        echo "üîç Running final checks before publishing..."
        
        # Format check
        cargo fmt --all --check
        
        # Clippy check
        cargo clippy --all-targets --all-features -- -D warnings
        
        # Test check
        cargo test --lib --bins
        
        # Verify package can be built
        cargo build --release --locked
        
        echo "‚úÖ All checks passed"
    
    - name: Dry run publish (check package)
      env:
        CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}
      run: |
        echo "üîç Running dry-run publish to validate package..."
        cargo publish --dry-run --locked
        echo "‚úÖ Dry-run successful"
    
    - name: Publish to crates.io
      env:
        CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}
      run: |
        echo "üì¶ Publishing lazycelery v${{ steps.version.outputs.version }} to crates.io..."
        cargo publish --locked
        echo "‚úÖ Successfully published to crates.io"
        echo "üåê Available at: https://crates.io/crates/lazycelery"